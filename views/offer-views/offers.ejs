<h2>My Offers</h2>

<h2>New Offer</h2>



<div class="pac-card" id="pac-card">
  <div>
    <div id="title">
      Autocomplete search
    </div>
    <div id="type-selector" class="pac-controls">
      <input type="radio" name="type" id="changetype-all" checked="checked">
      <label for="changetype-all">All</label>

      <input type="radio" name="type" id="changetype-establishment">
      <label for="changetype-establishment">Establishments</label>

      <input type="radio" name="type" id="changetype-address">
      <label for="changetype-address">Addresses</label>

      <input type="radio" name="type" id="changetype-geocode">
      <label for="changetype-geocode">Geocodes</label>
    </div>
    <div id="strict-bounds-selector" class="pac-controls">
      <input type="checkbox" id="use-strict-bounds" value="">
      <label for="use-strict-bounds">Strict Bounds</label>
    </div>
  </div>
  <div id="pac-container">
    <input id="pac-input" type="text" placeholder="Enter a location">
  </div>
</div>
<div id="map"></div>
<div id="infowindow-content">
  <img src="" width="16" height="16" id="place-icon">
  <span id="place-name" class="title"></span><br>
  <span id="place-address"></span>
</div>


<form class="styled-form" action="/offers" method="post" enctype="multipart/form-data">
  <div class="form-group">
    <label for="origin">Origin City</label>
    <input class="form-control" id="origin" type="text" name="originCity" placeholder="Miami">
    <input id="origin-lat-lng" type="hidden" name="originCityLatLng" value="">
  </div>
  <div class="form-group">
    <label for="destination">Destination City</label>
    <input class="form-control" id="destination" type="text" name="destinationCity" placeholder="Orlando">
    <input id="destination-lat-lng" type="hidden" name="destinationCityLatLng" value="">
  </div>
  <div class="form-group">
    <label for="car-type">Car Type</label>
    <select class="form-control" id="car-type" name="carType">
                <option value="mini">Mini</option>
                <option value="sedan" selected>Sedan</option>
                <option value="suv">SUV or Van</option>
                <option value="truck">Truck</option>
              </select>
  </div>
  <div class="form-group">
    <label for="spaces-available">Spaces Available</label>
    <select class="form-control" id="spaces-available" name="spacesAvailable">
                <option value="1" selected>1</option>
                <option value="2">2</option>
                <option value="3">3</option>
                <option value="4">4</option>
                <option value="5">5</option>
                <option value="6" >6</option>
              </select>
  </div>
  <div class="form-group">
    <label for="pets-accepted">Pets Accepted?</label>
    <select class="form-control" id="pets-accepted" name="petsAccepted">
      <option value="yes">Yes</option>
      <option value="no" selected>No</option>
    </select>
  </div>
  <div class="form-group">
    <label for="departure-date">Departure Date</label>
    <input class="form-control" id="departure-date" type="date" name="departureDate" placeholder="">
  </div>
  <div class="form-group">
    <label for="departure-time">Departure Time</label>
    <select class="form-control" id="departure-time" name="departureTime">
      <option value="morning">Morning</option>
      <option value="afternoon" selected>Afternoon</option>
      <option value="evening">Evening</option>
      <option value="night">Night Flight</option>
    </select>
  </div>
  <div class="form-group">
    <label for="barter-item">What would you like in exchange for this ride?</label>
    <select class="form-control" id="barter-item" name="barterItem">
      <option value="food">Food</option>
      <option value="water" selected>Water</option>
      <option value="gas">Gas</option>
      <option value="humor">Good Humor</option>
    </select>
  </div>

  <button class="btn btn-large btn-success">Add</button>
</form>


<ul>
  <%listOfOffers.forEach((offer) => {%>
    <li>
      <h3><%=offer.origin%></h3> <span>to</span>
      <h3><%=offer.destination%></h3>

      <a href="/offers/<%=offer._id%>/edit">Edit</a>
      <a href="/offers/<%=offer._id%>/delete">Delete</a>
    </li>

    <%})%>
</ul>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDvKcCoWtaoF6g7rspGQKL1zWMtwliK6hw&libraries=places&callback=initMap" async defer></script>
<script>
  // This example requires the Places library. Include the libraries=places
  // parameter when you first load the API. For example:
  // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">
  function initMap() {
    var map = new google.maps.Map(document.getElementById('map'), {
      center: {
        lat: -33.8688,
        lng: 151.2195
      },
      zoom: 13
    });
    var card = document.getElementById('pac-card');
    var input = document.getElementById('pac-input');
    var types = document.getElementById('type-selector');
    var strictBounds = document.getElementById('strict-bounds-selector');

    map.controls[google.maps.ControlPosition.TOP_RIGHT].push(card);

    var autocomplete = new google.maps.places.Autocomplete(input);

    // Bind the map's bounds (viewport) property to the autocomplete object,
    // so that the autocomplete requests use the current map bounds for the
    // bounds option in the request.
    autocomplete.bindTo('bounds', map);

    var infowindow = new google.maps.InfoWindow();
    var infowindowContent = document.getElementById('infowindow-content');
    infowindow.setContent(infowindowContent);
    var marker = new google.maps.Marker({
      map: map,
      anchorPoint: new google.maps.Point(0, -29)
    });
    autocomplete.addListener('place_changed', function() {
      infowindow.close();
      marker.setVisible(false);
      var place = autocomplete.getPlace(); //cl place for lat lng
      console.log(place);
      if (!place.geometry) {
        // User entered the name of a Place that was not suggested and
        // pressed the Enter key, or the Place Details request failed.
        window.alert("No details available for input: '" + place.name + "'");
        return;
      }

      // If the place has a geometry, then present it on a map.
      if (place.geometry.viewport) {
        map.fitBounds(place.geometry.viewport);
      } else {
        map.setCenter(place.geometry.location);
        map.setZoom(17); // Why 17? Because it looks good.
      }
      marker.setPosition(place.geometry.location);
      marker.setVisible(true);

      var address = '';
      if (place.address_components) {
        address = [
          (place.address_components[0] && place.address_components[0].short_name || ''),
          (place.address_components[1] && place.address_components[1].short_name || ''),
          (place.address_components[2] && place.address_components[2].short_name || '')
        ].join(' ');
      }

      infowindowContent.children['place-icon'].src = place.icon;
      infowindowContent.children['place-name'].textContent = place.name;
      infowindowContent.children['place-address'].textContent = address;
      infowindow.open(map, marker);
    });
    // Sets a listener on a radio button to change the filter type on Places
    // Autocomplete.
    function setupClickListener(id, types) {
      var radioButton = document.getElementById(id);
      radioButton.addEventListener('click', function() {
        autocomplete.setTypes(types);
      });
    }

    setupClickListener('changetype-all', []);
    setupClickListener('changetype-address', ['address']);
    setupClickListener('changetype-establishment', ['establishment']);
    setupClickListener('changetype-geocode', ['geocode']);

    document.getElementById('use-strict-bounds')
      .addEventListener('click', function() {
        console.log('Checkbox clicked! New state=' + this.checked);
        autocomplete.setOptions({
          strictBounds: this.checked
        });
      });
  }
</script>
