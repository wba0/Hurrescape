<%if(signupFeedback.length > 0){%>
  <p class="success-message">
    <%=signupFeedback%>
  </p>

  <%}%>

<%if(applySuccessView.length > 0){%>
  <p class="success-message">
    <%=applySuccessView%>
  </p>
<%}%>

      <%# <iframe id="windy-iframe" width="900" height="600" src="https://embed.windy.com/embed2.html?lat=25.858&lon=-80.131&zoom=5&level=surface&overlay=wind&menu=true&message=&marker=&forecast=12&calendar=now&location=ip&type=map&actualGrid=&metricWind=kt&metricTemp=%C2%B0F" frameborder="0">

</iframe>%>

        <div class="row">
          <div class="col-md-2 index-left-panel">
            <ul class="list-group" id="storm-list">
              <h5 class="text-center">Current Storm Information</h5>

            </ul>

          </div>


          <div class="col-md-5">
            <div id="windy-container">
              <h3 class="text-center index-h3">Wind Map</h3>
            </div>

          </div>
          <div class="col-md-5">
            <h3 class="text-center index-h3">Storm Tracking</h3>
            <div id="tracking-container"></div>
          </div>
        </div>


        <%# <h3>Current cyclone map</h3>
<span id="wu-map"></span>
<img id="wu-map-img" src="" alt="">%>
          <div id="find-ride-section">
            <h3 class="mx-auto text-center index-h3">Find a Ride</h3>

            <div class="row no-max-width justify-content-md-center">

              <div class="form-group col-md-5 map-group">
                <div id="originMap"></div>
                <label for="origin">Origin City</label>
                <div id="pac-container">
                  <input class="form-control" id="pac-input" type="text" placeholder="Origin City" name="originCity">
                </div>
                <input id="origin-lat" type="hidden" name="originCityLatLng[]" value="">
                <input id="origin-lng" type="hidden" name="originCityLatLng[]" value="">
              </div>
              <div class="form-group col-md-5 map-group">
                <div id="destinationMap"></div>
                <label for="destination">Destination City</label>
                <div id="pac-container-destination">
                  <input class="form-control" id="pac-input-destination" type="text" placeholder="Destination City" name="destinationCity">
                </div>
                <input id="destination-lat" type="hidden" name="destinationCityLatLng[]" value="">
                <input id="destination-lng" type="hidden" name="destinationCityLatLng[]" value="">
              </div>
            </div>





            <div class="row card-row justify-content-md-center">
              <div class="card-deck">
                <%listOfOffers.forEach((offer) => {%>
                  <div class="col-md-6 ">
                    <div class="card ride-card" data-origin="<%=offer.origin%>" data-destination="<%=offer.destination%>">
                      <h4 class="card-header"><%=offer.origin%> <i class="fa fa-arrow-circle-right" aria-hidden="true"></i>
                        <%=offer.destination%></h4>
                      <br>
                      <h5 class="text-center"> with: <%=offer.owner.email%></h5>
                      <img class="d-block mx-auto card-img-top offer-avatar" src="<%=offer.ownerAvatar%>" alt="Card image cap" onerror="this.src='images/default.png'">
                      <div class="departure-date-time text-center">
                        <i class="fa fa-calendar-check-o" aria-hidden="true"></i>
                        <%=offer.departureDate.toDateString()%><br>
                          <i class="fa fa-clock-o" aria-hidden="true"></i>
                          <%=offer.departureTime%>
                      </div>
                      <div class="row">
                        <div class="col-md-6">
                          <ul class="list-group list-group-flush">
                            <li class="list-group-item offer-info-line"><i class="fa fa-car" aria-hidden="true"></i>
                              <%=offer.car%>
                            </li>
                            <li class="list-group-item offer-info-line"><i class="fa fa-users" aria-hidden="true"></i>
                              <%=offer.spaces%>
                            </li>
                          </ul>
                        </div>
                        <div class="col-md-6">
                          <ul class="list-group list-group-flush">
                            <li class="list-group-item offer-info-line"><i class="fa fa-paw" aria-hidden="true"></i>

                              <%if(offer.pets === "true"){ %>
                                <span>allowed!</span>
                                <%} else {%>
                                  <span>no</span>
                                  <%}%>
                            </li>
                            <li class="list-group-item offer-info-line"><i class="fa fa-exchange" aria-hidden="true"></i>
                              <%=offer.barter%>
                            </li>
                          </ul>

                        </div>

                      </div>
                      <div class="apply-section text-center">
                        <form method="post" action="/offers/<%=offer._id%>/apply" class="styled-form">
                          <label for="phone-number-input">Enter phone number to apply</label>
                          <input id="phone-number-input" type="tel" name="phoneNumber" placeholder=" (555)555-5555" onkeydown="javascript:backspacerDOWN(this,event);" onkeyup="javascript:backspacerUP(this,event);">
                          <button class="btn btn-primary">Apply</button>
                        </form>
                      </div>
                      <div class="card-footer">
                        <small class="text-muted">Created on <%=offer.createdAt.toDateString()%></small>
                      </div>
                      <%})%>
                    </div>
                  </div>
              </div>
            </div>
          </div>

          <div class="filler-div"></div>

          <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDvKcCoWtaoF6g7rspGQKL1zWMtwliK6hw&libraries=places&callback=initMap" async defer></script>
          <script>

            // This example requires the Places library. Include the libraries=places
            // parameter when you first load the API. For example:
            // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">
            function initMap() {
              var originMap = new google.maps.Map(document.getElementById('originMap'), {
                center: {
                  lat: -33.8688,
                  lng: 151.2195
                },
                zoom: 14,
                zoomControl: false,
                mapTypeControl: false,
                streetViewControl: false,
                rotateControl: false,
                fullscreenControl: false
              });

              var destinationMap = new google.maps.Map(document.getElementById('destinationMap'), {
                center: {
                  lat: -33.8688,
                  lng: 151.2195
                },
                zoom: 14,
                zoomControl: false,
                mapTypeControl: false,
                streetViewControl: false,
                rotateControl: false,
                fullscreenControl: false
              });

              var card = document.getElementById('pac-card');
              var input = document.getElementById('pac-input');


              var cardD = document.getElementById('pac-card-destination');
              var inputD = document.getElementById('pac-input-destination');

              originMap.controls[google.maps.ControlPosition.TOP_RIGHT].push(card);
              destinationMap.controls[google.maps.ControlPosition.TOP_RIGHT].push(cardD);

              var autocomplete = new google.maps.places.Autocomplete(input);
              var autocompleteD = new google.maps.places.Autocomplete(inputD);

              // Bind the map's bounds (viewport) property to the autocomplete object,
              // so that the autocomplete requests use the current map bounds for the
              // bounds option in the request.
              autocomplete.bindTo('bounds', originMap);
              autocompleteD.bindTo('bounds', destinationMap);

              var infowindow = new google.maps.InfoWindow();
              var infowindowContent = document.getElementById('infowindow-content');
              infowindow.setContent(infowindowContent);
              var marker = new google.maps.Marker({
                map: originMap,
                anchorPoint: new google.maps.Point(0, -29)
              });

              var infowindowD = new google.maps.InfoWindow();
              var infowindowContentD = document.getElementById('infowindow-content-destination');
              infowindowD.setContent(infowindowContentD);
              var markerD = new google.maps.Marker({
                map: destinationMap,
                anchorPointD: new google.maps.Point(0, -29)
              });


              autocomplete.addListener('place_changed', function() {
                $(".card.ride-card").hide();


                infowindow.close();
                marker.setVisible(false);
                var place = autocomplete.getPlace();

                //working on this ----------------------------------------------
                var searchedOrigin = place.formatted_address;

                console.log(searchedOrigin);
                console.log($(".ride-card").attr("data-origin"));

                if ($(".ride-card").attr("data-origin") === searchedOrigin  ) {
                  const matchedCard = $('.ride-card[data-origin="' + searchedOrigin + '"]');
                  matchedCard.show();
                  // $('.ride-card[data-origin=`${searchedOrigin}`]').show();
                }

                //-----------------------------------------------------------------

                document.getElementById("origin-lat").value = place.geometry.location.lat();
                document.getElementById("origin-lng").value = place.geometry.location.lng();
                // $("#origin-lat-lng").value(oLatLngArr);

                if (!place.geometry) {

                  window.alert("No details available for input: '" + place.name + "'");
                  return;
                }


                // If the place has a geometry, then present it on a map.
                if (place.geometry.viewport) {
                  originMap.fitBounds(place.geometry.viewport);
                } else {
                  originMap.setCenter(place.geometry.location);
                  originMap.setZoom(17); // Why 17? Because it looks good.
                }
                marker.setPosition(place.geometry.location);
                marker.setVisible(true);

                var address = '';
                if (place.address_components) {
                  address = [
                    (place.address_components[0] && place.address_components[0].short_name || ''),
                    (place.address_components[1] && place.address_components[1].short_name || ''),
                    (place.address_components[2] && place.address_components[2].short_name || '')
                  ].join(' ');
                }

              });

              autocompleteD.addListener('place_changed', function() {
                $(".card.ride-card").hide();

                infowindowD.close();
                markerD.setVisible(false);
                var placeD = autocompleteD.getPlace();
                var searchedDestination = placeD.formatted_address;


                if ($(".ride-card").attr("data-destination") === searchedDestination) {
                  const matchedCard = $('.ride-card[data-destination="' + searchedDestination + '"]');
                  matchedCard.show();
                  // $('.ride-card[data-origin=`${searchedOrigin}`]').show();
                }

                document.getElementById("destination-lat").value = placeD.geometry.location.lat();
                document.getElementById("destination-lng").value = placeD.geometry.location.lng();
                if (!placeD.geometry) {

                  window.alert("No details available for input: '" + placeD.name + "'");
                  return;
                }

                // If the place has a geometry, then present it on a map.
                if (placeD.geometry.viewport) {
                  destinationMap.fitBounds(placeD.geometry.viewport);
                } else {
                  destinationMap.setCenter(placeD.geometry.location);
                  destinationMap.setZoom(17); // Why 17? Because it looks good.
                }
                markerD.setPosition(placeD.geometry.location);
                markerD.setVisible(true);

                var addressD = '';
                if (placeD.address_components) {
                  addressD = [
                    (placeD.address_components[0] && placeD.address_components[0].short_name || ''),
                    (placeD.address_components[1] && placeD.address_components[1].short_name || ''),
                    (placeD.address_components[2] && placeD.address_components[2].short_name || '')
                  ].join(' ');
                }

              });



            }
          </script>
